{"ast":null,"code":"var _jsxFileName = \"D:\\\\project2\\\\project2\\\\app\\\\src\\\\component\\\\owner\\\\Report.js\",\n    _s = $RefreshSig$();\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useRef, useState } from \"react\";\nimport { Bar, getElementAtEvent } from \"react-chartjs-2\";\nimport { API_GET } from \"../../api\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport ProductOwnerItem from './ProductOwnerItem';\nimport ProductOwners from './ProductOwners';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: 'top'\n  },\n  title: {\n    display: true,\n    text: 'รายงานจำนวนสินค้า'\n  }\n};\nexport default function Report() {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [chartData, setCharData] = useState({});\n  const [store, setStore] = useState([]);\n  const [productStore, setProductStore] = useState([]);\n  const chartRef = useRef();\n  useEffect(() => {\n    async function fetchData() {\n      let json = await API_GET(\"report\");\n      console.log(json.data);\n      setStore(json.data);\n      var labels = [];\n      var data = []; // for (var i = 0; i < json.data.length; i++) {\n      //     var item = json.data[i];\n      //     labels.push(item.product_name);\n      //     data.push(item.stock);\n      // }\n\n      json.data.map(item => {\n        labels.push();\n      });\n      var dataset = {\n        labels: labels,\n        datasets: [{\n          label: \"จำนวนสินค้าแต่ละรายการ\",\n          data: data,\n          backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n        }]\n      };\n      setCharData(dataset);\n      setIsLoading(true);\n    }\n\n    fetchData();\n  }, []);\n\n  const getChart = () => {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(Bar, {\n        options: options,\n        data: chartData,\n        ref: chartRef,\n        onClick: onClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid mt-3\",\n        children: getChart()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid mt-3\",\n        children: productStore.map(item => /*#__PURE__*/_jsxDEV(ProductOwners, {\n          data: item\n        }, item.product_type_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n\n  const onClick = async event => {\n    var element = getElementAtEvent(chartRef.current, event);\n    var index = element[0].index;\n    await getProducts(store[index].product_type_id);\n  };\n\n  const getProducts = async product_type_id => {\n    let json = await API_GET(\"products\" + product_type_id);\n    setProductStore(json.data);\n  };\n}\n\n_s(Report, \"Bf8LSmMYfFLLmqwqzULQAAcX+K0=\");\n\n_c = Report;\n\nvar _c;\n\n$RefreshReg$(_c, \"Report\");","map":{"version":3,"names":["useEffect","useRef","useState","Bar","getElementAtEvent","API_GET","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","ProductOwnerItem","ProductOwners","register","options","responsive","plugins","legend","title","display","text","Report","isLoading","setIsLoading","chartData","setCharData","store","setStore","productStore","setProductStore","chartRef","fetchData","json","console","log","data","labels","map","item","push","dataset","datasets","label","backgroundColor","getChart","onClick","product_type_id","event","element","current","index","getProducts"],"sources":["D:/project2/project2/app/src/component/owner/Report.js"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { Bar, getElementAtEvent} from \"react-chartjs-2\";\r\nimport { API_GET } from \"../../api\";\r\nimport{\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport ProductOwnerItem from './ProductOwnerItem';\r\nimport ProductOwners from './ProductOwners';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\nexport const options = {\r\n    responsive: true,\r\n    plugins: {\r\n        legend: 'top',\r\n    },\r\n    title: {\r\n        display: true,\r\n        text: 'รายงานจำนวนสินค้า',\r\n    },\r\n};\r\n\r\nexport default function Report() {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [chartData, setCharData] = useState({});\r\n    const [store, setStore] = useState([]);\r\n    const [productStore, setProductStore] = useState([]);\r\n    const chartRef = useRef();\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            let json = await API_GET(\"report\");\r\n            console.log(json.data)\r\n\r\n            setStore(json.data);\r\n\r\n            var labels = [];\r\n            var data = [];\r\n\r\n            // for (var i = 0; i < json.data.length; i++) {\r\n            //     var item = json.data[i];\r\n            //     labels.push(item.product_name);\r\n            //     data.push(item.stock);\r\n            // }\r\n\r\n            json.data.map(item => {\r\n                labels.push()\r\n            })\r\n\r\n            var dataset = {\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"จำนวนสินค้าแต่ละรายการ\",\r\n                        data: data,\r\n                        backgroundColor: \"rgba(255, 99, 132, 0.5)\"\r\n                    }\r\n                ]\r\n            }\r\n\r\n            setCharData(dataset);\r\n            setIsLoading(true);\r\n        }\r\n\r\n        fetchData();\r\n    },  []);\r\n\r\n\r\n    const getChart = () => {\r\n        if (isLoading) {\r\n            return <Bar \r\n                options={options} \r\n                data={chartData}\r\n                ref={chartRef}\r\n                onClick={onClick} />;\r\n        }\r\n\r\n        return(\r\n\r\n            <>\r\n                <div className=\"container-fluid mt-3\">\r\n                    {\r\n                        getChart()\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"container-fluid mt-3\">\r\n                    {\r\n                        productStore.map(item => (\r\n                            <ProductOwners\r\n                                key={item.product_type_id}\r\n                                data={item}/>\r\n                        ))\r\n                    }\r\n\r\n                </div>\r\n            \r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n    const onClick = async (event) => {\r\n        var element = getElementAtEvent(chartRef.current, event);\r\n        var index = element[0].index;\r\n\r\n        await getProducts(store[index].product_type_id);\r\n    }\r\n\r\n    const getProducts = async (product_type_id) =>{\r\n        let json = await API_GET(\"products\" + product_type_id);\r\n        setProductStore(json.data);\r\n    }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}